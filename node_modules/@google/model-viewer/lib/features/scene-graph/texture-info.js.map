{"version":3,"file":"texture-info.js","sourceRoot":"","sources":["../../../src/features/scene-graph/texture-info.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ColorSpace, LinearSRGBColorSpace, MeshPhysicalMaterial, SRGBColorSpace, Texture as ThreeTexture, Vector2, VideoTexture} from 'three';\n\nimport {TextureInfo as TextureInfoInterface} from './api.js';\nimport {$threeTexture} from './image.js';\nimport {Texture} from './texture.js';\n\nconst $texture = Symbol('texture');\nconst $transform = Symbol('transform');\nexport const $materials = Symbol('materials');\nexport const $usage = Symbol('usage');\nconst $onUpdate = Symbol('onUpdate');\nconst $activeVideo = Symbol('activeVideo');\n\n// Defines what a texture will be used for.\nexport enum TextureUsage {\n  Base,\n  MetallicRoughness,\n  Normal,\n  Occlusion,\n  Emissive,\n  Clearcoat,\n  ClearcoatRoughness,\n  ClearcoatNormal,\n  SheenColor,\n  SheenRoughness,\n  Transmission,\n  Thickness,\n  Specular,\n  SpecularColor,\n  Iridescence,\n  IridescenceThickness,\n  Anisotropy,\n}\n\ninterface TextureTransform {\n  rotation: number;\n  scale: Vector2;\n  offset: Vector2;\n}\n\n/**\n * TextureInfo facade implementation for Three.js materials\n */\nexport class TextureInfo implements TextureInfoInterface {\n  private[$texture]: Texture|null = null;\n  private[$transform]: TextureTransform = {\n    rotation: 0,\n    scale: new Vector2(1, 1),\n    offset: new Vector2(0, 0)\n  };\n\n  // Holds a reference to the Three data that backs the material object.\n  private[$materials]: Set<MeshPhysicalMaterial>|null;\n\n  // Texture usage defines the how the texture is used (ie Normal, Emissive...\n  // etc)\n  private[$usage]: TextureUsage;\n  private[$onUpdate]: () => void;\n  private[$activeVideo] = false;\n\n  constructor(\n      onUpdate: () => void, usage: TextureUsage,\n      threeTexture: ThreeTexture|null, material: Set<MeshPhysicalMaterial>) {\n    // Creates image, sampler, and texture if valid texture info is provided.\n    if (threeTexture) {\n      this[$transform].rotation = threeTexture.rotation;\n      this[$transform].scale.copy(threeTexture.repeat);\n      this[$transform].offset.copy(threeTexture.offset);\n\n      this[$texture] = new Texture(onUpdate, threeTexture);\n    }\n\n    this[$onUpdate] = onUpdate;\n    this[$materials] = material;\n    this[$usage] = usage;\n  }\n\n  get texture(): Texture|null {\n    return this[$texture];\n  }\n\n  setTexture(texture: Texture|null): void {\n    const threeTexture: ThreeTexture|null =\n        texture != null ? texture.source[$threeTexture] : null;\n\n    const oldTexture = this[$texture]?.source[$threeTexture] as VideoTexture;\n    if (oldTexture != null && oldTexture.isVideoTexture) {\n      this[$activeVideo] = false;\n    } else if (this[$texture]?.source.animation) {\n      this[$texture].source.animation.removeEventListener(\n          'enterFrame', this[$onUpdate]);\n    }\n\n    this[$texture] = texture;\n\n    if (threeTexture != null && (threeTexture as VideoTexture).isVideoTexture) {\n      const element = threeTexture.image;\n      this[$activeVideo] = true;\n      if (element.requestVideoFrameCallback != null) {\n        const update = () => {\n          if (!this[$activeVideo]) {\n            return;\n          }\n          this[$onUpdate]();\n          element.requestVideoFrameCallback(update);\n        };\n        element.requestVideoFrameCallback(update);\n      } else {\n        const update = () => {\n          if (!this[$activeVideo]) {\n            return;\n          }\n          this[$onUpdate]();\n          requestAnimationFrame(update);\n        };\n        requestAnimationFrame(update);\n      }\n    } else if (texture?.source.animation != null) {\n      texture.source.animation.addEventListener('enterFrame', this[$onUpdate]);\n    }\n\n    let colorSpace: ColorSpace = SRGBColorSpace;\n    if (this[$materials]) {\n      for (const material of this[$materials]!) {\n        switch (this[$usage]) {\n          case TextureUsage.Base:\n            material.map = threeTexture;\n            break;\n          case TextureUsage.MetallicRoughness:\n            colorSpace = LinearSRGBColorSpace;\n            material.metalnessMap = threeTexture;\n            material.roughnessMap = threeTexture;\n            break;\n          case TextureUsage.Normal:\n            colorSpace = LinearSRGBColorSpace;\n            material.normalMap = threeTexture;\n            break;\n          case TextureUsage.Occlusion:\n            colorSpace = LinearSRGBColorSpace;\n            material.aoMap = threeTexture;\n            break;\n          case TextureUsage.Emissive:\n            material.emissiveMap = threeTexture;\n            break;\n          case TextureUsage.Clearcoat:\n            material.clearcoatMap = threeTexture;\n            break;\n          case TextureUsage.ClearcoatRoughness:\n            material.clearcoatRoughnessMap = threeTexture;\n            break;\n          case TextureUsage.ClearcoatNormal:\n            material.clearcoatNormalMap = threeTexture;\n            break;\n          case TextureUsage.SheenColor:\n            material.sheenColorMap = threeTexture;\n            break;\n          case TextureUsage.SheenRoughness:\n            material.sheenRoughnessMap = threeTexture;\n            break;\n          case TextureUsage.Transmission:\n            material.transmissionMap = threeTexture;\n            break;\n          case TextureUsage.Thickness:\n            material.thicknessMap = threeTexture;\n            break;\n          case TextureUsage.Specular:\n            material.specularIntensityMap = threeTexture;\n            break;\n          case TextureUsage.SpecularColor:\n            material.specularColorMap = threeTexture;\n            break;\n          case TextureUsage.Iridescence:\n            material.iridescenceMap = threeTexture;\n            break;\n          case TextureUsage.IridescenceThickness:\n            material.iridescenceThicknessMap = threeTexture;\n            break;\n          case TextureUsage.Anisotropy:\n            (material as any).anisotropyMap = threeTexture;\n            break;\n          default:\n        }\n        material.needsUpdate = true;\n      }\n    }\n\n    if (threeTexture) {\n      // Updates the colorSpace for the texture, affects all references.\n      threeTexture.colorSpace = colorSpace;\n      threeTexture.rotation = this[$transform].rotation;\n      threeTexture.repeat = this[$transform].scale;\n      threeTexture.offset = this[$transform].offset;\n    }\n    this[$onUpdate]();\n  }\n}\n"]}