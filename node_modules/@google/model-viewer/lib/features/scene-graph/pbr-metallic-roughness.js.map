{"version":3,"file":"pbr-metallic-roughness.js","sourceRoot":"","sources":["../../../src/features/scene-graph/pbr-metallic-roughness.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Color, ColorRepresentation, MeshPhysicalMaterial} from 'three';\n\nimport {PBRMetallicRoughness as PBRMetallicRoughnessInterface, RGBA} from './api.js';\nimport {TextureInfo, TextureUsage} from './texture-info.js';\nimport {$correlatedObjects, $onUpdate, ThreeDOMElement} from './three-dom-element.js';\n\n\nconst $threeMaterial = Symbol('threeMaterial');\nconst $threeMaterials = Symbol('threeMaterials');\nconst $baseColorTexture = Symbol('baseColorTexture');\nconst $metallicRoughnessTexture = Symbol('metallicRoughnessTexture');\n\n/**\n * PBR material properties facade implementation for Three.js materials\n */\nexport class PBRMetallicRoughness extends ThreeDOMElement implements\n    PBRMetallicRoughnessInterface {\n  private[$baseColorTexture]: TextureInfo;\n  private[$metallicRoughnessTexture]: TextureInfo;\n\n  private get[$threeMaterials](): Set<MeshPhysicalMaterial> {\n    return this[$correlatedObjects] as Set<MeshPhysicalMaterial>;\n  }\n\n  private get[$threeMaterial]() {\n    return this[$correlatedObjects]?.values().next().value as\n        MeshPhysicalMaterial;\n  }\n\n  constructor(\n      onUpdate: () => void, correlatedMaterials: Set<MeshPhysicalMaterial>) {\n    super(onUpdate, correlatedMaterials);\n\n    const {map, metalnessMap} = correlatedMaterials.values().next().value!;\n\n    this[$baseColorTexture] =\n        new TextureInfo(onUpdate, TextureUsage.Base, map, correlatedMaterials);\n\n    this[$metallicRoughnessTexture] = new TextureInfo(\n        onUpdate,\n        TextureUsage.MetallicRoughness,\n        metalnessMap,\n        correlatedMaterials);\n  }\n\n\n  get baseColorFactor(): RGBA {\n    const rgba = [0, 0, 0, this[$threeMaterial].opacity];\n    this[$threeMaterial].color.toArray(rgba);\n    return rgba as RGBA;\n  }\n\n  get metallicFactor(): number {\n    return this[$threeMaterial].metalness;\n  }\n\n  get roughnessFactor(): number {\n    return this[$threeMaterial].roughness;\n  }\n\n  get baseColorTexture(): TextureInfo {\n    return this[$baseColorTexture];\n  }\n\n  get metallicRoughnessTexture(): TextureInfo {\n    return this[$metallicRoughnessTexture];\n  }\n\n  setBaseColorFactor(rgba: RGBA|string) {\n    const color = new Color();\n    if (rgba instanceof Array) {\n      color.fromArray(rgba);\n    } else {\n      color.set(rgba as ColorRepresentation);\n    }\n    for (const material of this[$threeMaterials]) {\n      material.color.set(color);\n      if (rgba instanceof Array && rgba.length > 3) {\n        material.opacity = rgba[3];\n      } else {\n        rgba = [0, 0, 0, material.opacity];\n        color.toArray(rgba);\n      }\n    }\n    this[$onUpdate]();\n  }\n\n  setMetallicFactor(value: number) {\n    for (const material of this[$threeMaterials]) {\n      material.metalness = value;\n    }\n    this[$onUpdate]();\n  }\n\n  setRoughnessFactor(value: number) {\n    for (const material of this[$threeMaterials]) {\n      material.roughness = value;\n    }\n    this[$onUpdate]();\n  }\n}\n"]}