{"version":3,"file":"sampler.js","sourceRoot":"","sources":["../../../src/features/scene-graph/sampler.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ClampToEdgeWrapping, LinearFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, MagnificationTextureFilter, MinificationTextureFilter, MirroredRepeatWrapping, NearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, RepeatWrapping, Texture as ThreeTexture, Vector2, Wrapping} from 'three';\n\nimport {toVector2D, Vector2D} from '../../model-viewer-base.js';\nimport {Filter, MagFilter, MinFilter, Wrap, WrapMode} from '../../three-components/gltf-instance/gltf-2.0.js';\nimport {Sampler as DefaultedSampler} from '../../three-components/gltf-instance/gltf-defaulted.js';\n\nimport {Sampler as SamplerInterface, Vector2DInterface} from './api.js';\nimport {$correlatedObjects, $onUpdate, ThreeDOMElement} from './three-dom-element.js';\n\n// Convertion between gltf standards and threejs standards.\nconst wrapModeToWrapping = new Map<WrapMode, Wrapping>([\n  [Wrap.Repeat, RepeatWrapping],\n  [Wrap.ClampToEdge, ClampToEdgeWrapping],\n  [Wrap.MirroredRepeat, MirroredRepeatWrapping]\n]);\nconst wrappingToWrapMode = new Map<Wrapping, WrapMode>([\n  [RepeatWrapping, Wrap.Repeat],\n  [ClampToEdgeWrapping, Wrap.ClampToEdge],\n  [MirroredRepeatWrapping, Wrap.MirroredRepeat]\n]);\nconst minFilterToMinification = new Map<MinFilter, MinificationTextureFilter>([\n  [Filter.Nearest, NearestFilter],\n  [Filter.Linear, LinearFilter],\n  [Filter.NearestMipmapNearest, NearestMipmapNearestFilter],\n  [Filter.LinearMipmapNearest, LinearMipmapNearestFilter],\n  [Filter.NearestMipmapLinear, NearestMipmapLinearFilter],\n  [Filter.LinearMipmapLinear, LinearMipmapLinearFilter]\n]);\nconst minificationToMinFilter = new Map<MinificationTextureFilter, MinFilter>([\n  [NearestFilter, Filter.Nearest],\n  [LinearFilter, Filter.Linear],\n  [NearestMipmapNearestFilter, Filter.NearestMipmapNearest],\n  [LinearMipmapNearestFilter, Filter.LinearMipmapNearest],\n  [NearestMipmapLinearFilter, Filter.NearestMipmapLinear],\n  [LinearMipmapLinearFilter, Filter.LinearMipmapLinear]\n]);\nconst magFilterToMagnification = new Map<MagFilter, MagnificationTextureFilter>(\n    [[Filter.Nearest, NearestFilter], [Filter.Linear, LinearFilter]]);\nconst magnificationToMagFilter = new Map<MagnificationTextureFilter, MagFilter>(\n    [[NearestFilter, Filter.Nearest], [LinearFilter, Filter.Linear]]);\n\n// Checks for threejs standards.\nconst isMinFilter = (() => {\n  return (value: unknown): value is MinificationTextureFilter =>\n             minificationToMinFilter.has(value as MinificationTextureFilter);\n})();\n\nconst isMagFilter = (() => {\n  return (value: unknown): value is MagnificationTextureFilter =>\n             magnificationToMagFilter.has(value as MagnificationTextureFilter);\n})();\n\nconst isWrapping = (() => {\n  return (value: unknown): value is Wrapping =>\n             wrappingToWrapMode.has(value as Wrapping);\n})();\n\nconst isValidSamplerValue =\n    <P extends 'minFilter'|'magFilter'|'wrapS'|'wrapT'|'rotation'|'repeat'|\n     'offset'>(property: P, value: unknown): value is DefaultedSampler[P] => {\n      switch (property) {\n        case 'minFilter':\n          return isMinFilter(value);\n        case 'magFilter':\n          return isMagFilter(value);\n        case 'wrapS':\n        case 'wrapT':\n          return isWrapping(value);\n        case 'rotation':\n        case 'repeat':\n        case 'offset':\n          return true;\n        default:\n          throw new Error(`Cannot configure property \"${property}\" on Sampler`);\n      }\n    };\n\nconst $threeTexture = Symbol('threeTexture');\nconst $threeTextures = Symbol('threeTextures');\nconst $setProperty = Symbol('setProperty');\n\n/**\n * Sampler facade implementation for Three.js textures\n */\nexport class Sampler extends ThreeDOMElement implements SamplerInterface {\n  private get[$threeTexture]() {\n    return this[$correlatedObjects]?.values().next().value as ThreeTexture;\n  }\n\n  private get[$threeTextures]() {\n    return this[$correlatedObjects] as Set<ThreeTexture>;\n  }\n\n  constructor(onUpdate: () => void, texture: ThreeTexture) {\n    super(onUpdate, new Set<ThreeTexture>(texture ? [texture] : []));\n  }\n\n  get name(): string {\n    return this[$threeTexture].name || '';\n  }\n\n  get minFilter(): MinFilter {\n    return minificationToMinFilter.get(this[$threeTexture].minFilter)!;\n  }\n\n  get magFilter(): MagFilter {\n    return magnificationToMagFilter.get(this[$threeTexture].magFilter)!;\n  }\n\n  get wrapS(): WrapMode {\n    return wrappingToWrapMode.get(this[$threeTexture].wrapS)!;\n  }\n\n  get wrapT(): WrapMode {\n    return wrappingToWrapMode.get(this[$threeTexture].wrapT)!;\n  }\n\n  get rotation(): number {\n    return this[$threeTexture].rotation;\n  }\n\n  get scale(): Vector2D {\n    return toVector2D(this[$threeTexture].repeat);\n  }\n\n  get offset(): Vector2D|null {\n    return toVector2D(this[$threeTexture].offset);\n  }\n\n  setMinFilter(filter: MinFilter) {\n    this[$setProperty]('minFilter', minFilterToMinification.get(filter)!);\n  }\n\n  setMagFilter(filter: MagFilter) {\n    this[$setProperty]('magFilter', magFilterToMagnification.get(filter)!);\n  }\n\n  setWrapS(mode: WrapMode) {\n    this[$setProperty]('wrapS', wrapModeToWrapping.get(mode)!);\n  }\n\n  setWrapT(mode: WrapMode) {\n    this[$setProperty]('wrapT', wrapModeToWrapping.get(mode)!);\n  }\n\n  setRotation(rotation: number|null): void {\n    if (rotation == null) {\n      // Reset rotation.\n      rotation = 0;\n    }\n    this[$setProperty]('rotation', rotation);\n  }\n\n  setScale(scale: Vector2DInterface|null): void {\n    if (scale == null) {\n      // Reset scale.\n      scale = {u: 1, v: 1};\n    }\n    this[$setProperty]('repeat', new Vector2(scale.u, scale.v));\n  }\n\n  setOffset(offset: Vector2DInterface|null): void {\n    if (offset == null) {\n      // Reset offset.\n      offset = {u: 0, v: 0};\n    }\n    this[$setProperty]('offset', new Vector2(offset.u, offset.v));\n  }\n\n  private[$setProperty]<P extends 'minFilter'|'magFilter'|'wrapS'|'wrapT'|\n                        'rotation'|'repeat'|'offset'>(\n      property: P, value: MinFilter|MagFilter|Wrapping|number|Vector2) {\n    if (isValidSamplerValue(property, value)) {\n      for (const texture of this[$threeTextures]) {\n        (texture[property] as MinFilter | MagFilter | Wrapping | number |\n         Vector2) = value;\n        texture.needsUpdate = true;\n      }\n    }\n    this[$onUpdate]();\n  }\n}\n"]}