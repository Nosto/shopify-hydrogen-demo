{"version":3,"file":"material.js","sourceRoot":"","sources":["../../../src/features/scene-graph/material.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Color, ColorRepresentation, DoubleSide, FrontSide, MeshPhysicalMaterial, Vector2} from 'three';\n\nimport {AlphaMode, RGB} from '../../three-components/gltf-instance/gltf-2.0.js';\n\nimport {Material as MaterialInterface} from './api.js';\nimport {LazyLoader, VariantData} from './model.js';\nimport {PBRMetallicRoughness} from './pbr-metallic-roughness.js';\nimport {TextureInfo, TextureUsage} from './texture-info.js';\nimport {$correlatedObjects, $onUpdate, ThreeDOMElement} from './three-dom-element.js';\n\n\n\nconst $pbrMetallicRoughness = Symbol('pbrMetallicRoughness');\nconst $normalTexture = Symbol('normalTexture');\nconst $occlusionTexture = Symbol('occlusionTexture');\nconst $emissiveTexture = Symbol('emissiveTexture');\nconst $backingThreeMaterial = Symbol('backingThreeMaterial');\nconst $applyAlphaCutoff = Symbol('applyAlphaCutoff');\nconst $getAlphaMode = Symbol('getAlphaMode');\nexport const $lazyLoadGLTFInfo = Symbol('lazyLoadGLTFInfo');\nconst $initialize = Symbol('initialize');\nexport const $getLoadedMaterial = Symbol('getLoadedMaterial');\nexport const $ensureMaterialIsLoaded = Symbol('ensureMaterialIsLoaded');\nexport const $gltfIndex = Symbol('gltfIndex');\nexport const $setActive = Symbol('setActive');\nexport const $variantIndices = Symbol('variantIndices');\nconst $isActive = Symbol('isActive');\nconst $modelVariants = Symbol('modelVariants');\nconst $name = Symbol('name');\nconst $pbrTextures = Symbol('pbrTextures');\n\n/**\n * Material facade implementation for Three.js materials\n */\nexport class Material extends ThreeDOMElement implements MaterialInterface {\n  private[$pbrMetallicRoughness]!: PBRMetallicRoughness;\n  private[$normalTexture]!: TextureInfo;\n  private[$occlusionTexture]!: TextureInfo;\n  private[$emissiveTexture]!: TextureInfo;\n  private[$lazyLoadGLTFInfo]?: LazyLoader;\n  private[$gltfIndex]: number;\n  private[$isActive]: boolean;\n  public[$variantIndices] = new Set<number>();\n  private[$name]?: string;\n  readonly[$modelVariants]: Map<string, VariantData>;\n  private[$pbrTextures] = new Map<TextureUsage, TextureInfo>();\n\n  get[$backingThreeMaterial](): MeshPhysicalMaterial {\n    return (this[$correlatedObjects] as Set<MeshPhysicalMaterial>)\n        .values()\n        .next()\n        .value!;\n  }\n\n  constructor(\n      onUpdate: () => void,\n      gltfIndex: number,\n      isActive: boolean,\n      modelVariants: Map<string, VariantData>,\n      correlatedMaterials: Set<MeshPhysicalMaterial>,\n      name: string|undefined,\n      lazyLoadInfo: LazyLoader|undefined = undefined,\n  ) {\n    super(onUpdate, correlatedMaterials);\n    this[$gltfIndex] = gltfIndex;\n    this[$isActive] = isActive;\n    this[$modelVariants] = modelVariants;\n    this[$name] = name;\n\n    if (lazyLoadInfo == null) {\n      this[$initialize]();\n    } else {\n      this[$lazyLoadGLTFInfo] = lazyLoadInfo;\n    }\n  }\n\n  private[$initialize](): void {\n    const onUpdate = this[$onUpdate] as () => void;\n    const correlatedMaterials =\n        this[$correlatedObjects] as Set<MeshPhysicalMaterial>;\n\n    this[$pbrMetallicRoughness] =\n        new PBRMetallicRoughness(onUpdate, correlatedMaterials);\n\n    const {normalMap, aoMap, emissiveMap} =\n        correlatedMaterials.values().next().value!;\n\n    this[$normalTexture] = new TextureInfo(\n        onUpdate,\n        TextureUsage.Normal,\n        normalMap,\n        correlatedMaterials,\n    );\n\n    this[$occlusionTexture] = new TextureInfo(\n        onUpdate,\n        TextureUsage.Occlusion,\n        aoMap,\n        correlatedMaterials,\n    );\n\n    this[$emissiveTexture] = new TextureInfo(\n        onUpdate,\n        TextureUsage.Emissive,\n        emissiveMap,\n        correlatedMaterials,\n    );\n\n    const createTextureInfo = (usage: TextureUsage) => {\n      this[$pbrTextures].set(\n          usage,\n          new TextureInfo(\n              onUpdate,\n              usage,\n              null,\n              correlatedMaterials,\n              ));\n    };\n\n    createTextureInfo(TextureUsage.Clearcoat);\n    createTextureInfo(TextureUsage.ClearcoatRoughness);\n    createTextureInfo(TextureUsage.ClearcoatNormal);\n    createTextureInfo(TextureUsage.SheenColor);\n    createTextureInfo(TextureUsage.SheenRoughness);\n    createTextureInfo(TextureUsage.Transmission);\n    createTextureInfo(TextureUsage.Thickness);\n    createTextureInfo(TextureUsage.Specular);\n    createTextureInfo(TextureUsage.SpecularColor);\n    createTextureInfo(TextureUsage.Iridescence);\n    createTextureInfo(TextureUsage.IridescenceThickness);\n    createTextureInfo(TextureUsage.Anisotropy);\n  }\n\n  async[$getLoadedMaterial](): Promise<MeshPhysicalMaterial|null> {\n    if (this[$lazyLoadGLTFInfo] != null) {\n      const material = await this[$lazyLoadGLTFInfo]!.doLazyLoad();\n\n      this[$initialize]();\n      // Releases lazy load info.\n      this[$lazyLoadGLTFInfo] = undefined;\n      // Redefines the method as a noop method.\n      this.ensureLoaded = async () => {};\n      return material as MeshPhysicalMaterial;\n    }\n    return null;\n  }\n\n  private colorFromRgb(rgb: RGB|string): Color {\n    const color = new Color();\n    if (rgb instanceof Array) {\n      color.fromArray(rgb);\n    } else {\n      color.set(rgb as ColorRepresentation);\n    }\n    return color;\n  }\n\n  [$ensureMaterialIsLoaded]() {\n    if (this[$lazyLoadGLTFInfo] == null) {\n      return;\n    }\n    throw new Error(`Material \"${this.name}\" has not been loaded, call 'await\n    myMaterial.ensureLoaded()' before using an unloaded material.`);\n  }\n\n  async ensureLoaded() {\n    await this[$getLoadedMaterial]();\n  }\n\n  get isLoaded() {\n    return this[$lazyLoadGLTFInfo] == null;\n  }\n\n  get isActive(): boolean {\n    return this[$isActive];\n  }\n\n  [$setActive](isActive: boolean) {\n    this[$isActive] = isActive;\n  }\n\n  get name(): string {\n    return this[$name] || '';\n  }\n\n  set name(name: string) {\n    this[$name] = name;\n    if (this[$correlatedObjects] != null) {\n      for (const threeMaterial of this[$correlatedObjects]!) {\n        threeMaterial.name = name;\n      }\n    }\n  }\n\n  get pbrMetallicRoughness(): PBRMetallicRoughness {\n    this[$ensureMaterialIsLoaded]();\n    return this[$pbrMetallicRoughness];\n  }\n\n  get normalTexture(): TextureInfo {\n    this[$ensureMaterialIsLoaded]();\n    return this[$normalTexture];\n  }\n\n  get occlusionTexture(): TextureInfo {\n    this[$ensureMaterialIsLoaded]();\n    return this[$occlusionTexture];\n  }\n\n  get emissiveTexture(): TextureInfo {\n    this[$ensureMaterialIsLoaded]();\n    return this[$emissiveTexture];\n  }\n\n  get emissiveFactor(): RGB {\n    this[$ensureMaterialIsLoaded]();\n    return (this[$backingThreeMaterial].emissive.toArray() as RGB);\n  }\n\n  get index(): number {\n    return this[$gltfIndex];\n  }\n\n  hasVariant(name: string): boolean {\n    const variantData = this[$modelVariants].get(name);\n    return variantData != null && this[$variantIndices].has(variantData.index);\n  }\n\n  setEmissiveFactor(rgb: RGB|string) {\n    this[$ensureMaterialIsLoaded]();\n    const color = this.colorFromRgb(rgb);\n    for (const material of this[$correlatedObjects] as\n         Set<MeshPhysicalMaterial>) {\n      material.emissive.set(color);\n    }\n    this[$onUpdate]();\n  }\n\n  [$getAlphaMode](): string {\n    // Follows implementation of GLTFExporter from three.js\n    if (this[$backingThreeMaterial].transparent) {\n      return 'BLEND';\n    } else {\n      if (this[$backingThreeMaterial].alphaTest > 0.0) {\n        return 'MASK';\n      }\n    }\n    return 'OPAQUE';\n  }\n\n  [$applyAlphaCutoff]() {\n    this[$ensureMaterialIsLoaded]();\n    for (const material of this[$correlatedObjects] as\n         Set<MeshPhysicalMaterial>) {\n      if (this[$getAlphaMode]() === 'MASK') {\n        if (material.alphaTest == undefined) {\n          material.alphaTest = 0.5;\n        }\n      } else {\n        (material.alphaTest as number | undefined) = undefined;\n      }\n\n      material.needsUpdate = true;\n    }\n  }\n\n  setAlphaCutoff(cutoff: number): void {\n    this[$ensureMaterialIsLoaded]();\n    for (const material of this[$correlatedObjects] as\n         Set<MeshPhysicalMaterial>) {\n      material.alphaTest = cutoff;\n      material.needsUpdate = true;\n    }\n    // Set AlphaCutoff to undefined if AlphaMode is not MASK.\n    this[$applyAlphaCutoff]();\n    this[$onUpdate]();\n  }\n\n  getAlphaCutoff(): number {\n    this[$ensureMaterialIsLoaded]();\n    return this[$backingThreeMaterial].alphaTest;\n  }\n\n  setDoubleSided(doubleSided: boolean): void {\n    this[$ensureMaterialIsLoaded]();\n    for (const material of this[$correlatedObjects] as\n         Set<MeshPhysicalMaterial>) {\n      // When double-sided is disabled gltf spec dictates that Back-Face culling\n      // must be disabled, in three.js parlance that would mean FrontSide\n      // rendering only.\n      // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#double-sided\n      material.side = doubleSided ? DoubleSide : FrontSide;\n      material.needsUpdate = true;\n    }\n    this[$onUpdate]();\n  }\n\n  getDoubleSided(): boolean {\n    this[$ensureMaterialIsLoaded]();\n    return this[$backingThreeMaterial].side == DoubleSide;\n  }\n\n  setAlphaMode(alphaMode: AlphaMode): void {\n    this[$ensureMaterialIsLoaded]();\n    const enableTransparency =\n        (material: MeshPhysicalMaterial, enabled: boolean): void => {\n          material.transparent = enabled;\n          material.depthWrite = !enabled;\n        };\n\n    for (const material of this[$correlatedObjects] as\n         Set<MeshPhysicalMaterial>) {\n      enableTransparency(material, alphaMode === 'BLEND');\n      if (alphaMode === 'MASK') {\n        material.alphaTest = 0.5;\n      } else {\n        (material.alphaTest as number | undefined) = undefined;\n      }\n      material.needsUpdate = true;\n    }\n    this[$onUpdate]();\n  }\n\n  getAlphaMode(): AlphaMode {\n    this[$ensureMaterialIsLoaded]();\n    return (this[$getAlphaMode]() as AlphaMode);\n  }\n\n  /**\n   * PBR Next properties.\n   */\n\n  // KHR_materials_emissive_strength\n  get emissiveStrength(): number {\n    this[$ensureMaterialIsLoaded]();\n    return this[$backingThreeMaterial].emissiveIntensity;\n  }\n\n  setEmissiveStrength(emissiveStrength: number) {\n    this[$ensureMaterialIsLoaded]();\n    for (const material of this[$correlatedObjects] as\n         Set<MeshPhysicalMaterial>) {\n      material.emissiveIntensity = emissiveStrength;\n    }\n    this[$onUpdate]();\n  }\n\n  // KHR_materials_clearcoat\n  get clearcoatFactor(): number {\n    this[$ensureMaterialIsLoaded]();\n    return this[$backingThreeMaterial].clearcoat;\n  }\n\n  get clearcoatRoughnessFactor(): number {\n    this[$ensureMaterialIsLoaded]();\n    return this[$backingThreeMaterial].clearcoatRoughness;\n  }\n\n  get clearcoatTexture(): TextureInfo {\n    this[$ensureMaterialIsLoaded]();\n    return this[$pbrTextures].get(TextureUsage.Clearcoat)!;\n  }\n\n  get clearcoatRoughnessTexture(): TextureInfo {\n    this[$ensureMaterialIsLoaded]();\n    return this[$pbrTextures].get(TextureUsage.ClearcoatRoughness)!;\n  }\n\n  get clearcoatNormalTexture(): TextureInfo {\n    this[$ensureMaterialIsLoaded]();\n    return this[$pbrTextures].get(TextureUsage.ClearcoatNormal)!;\n  }\n\n  get clearcoatNormalScale(): number {\n    this[$ensureMaterialIsLoaded]();\n    return this[$backingThreeMaterial].clearcoatNormalScale.x;\n  }\n\n  setClearcoatFactor(clearcoatFactor: number) {\n    this[$ensureMaterialIsLoaded]();\n    for (const material of this[$correlatedObjects] as\n         Set<MeshPhysicalMaterial>) {\n      material.clearcoat = clearcoatFactor;\n    }\n    this[$onUpdate]();\n  }\n\n  setClearcoatRoughnessFactor(clearcoatRoughnessFactor: number) {\n    this[$ensureMaterialIsLoaded]();\n    for (const material of this[$correlatedObjects] as\n         Set<MeshPhysicalMaterial>) {\n      material.clearcoatRoughness = clearcoatRoughnessFactor;\n    }\n    this[$onUpdate]();\n  }\n\n  setClearcoatNormalScale(clearcoatNormalScale: number) {\n    this[$ensureMaterialIsLoaded]();\n    for (const material of this[$correlatedObjects] as\n         Set<MeshPhysicalMaterial>) {\n      material.clearcoatNormalScale =\n          new Vector2(clearcoatNormalScale, clearcoatNormalScale);\n    }\n    this[$onUpdate]();\n  }\n\n  // KHR_materials_ior\n  get ior(): number {\n    this[$ensureMaterialIsLoaded]();\n    return this[$backingThreeMaterial].ior;\n  }\n\n  setIor(ior: number) {\n    this[$ensureMaterialIsLoaded]();\n    for (const material of this[$correlatedObjects] as\n         Set<MeshPhysicalMaterial>) {\n      material.ior = ior;\n    }\n    this[$onUpdate]();\n  }\n\n  // KHR_materials_sheen\n  get sheenColorFactor(): RGB {\n    this[$ensureMaterialIsLoaded]();\n    return (this[$backingThreeMaterial].sheenColor.toArray() as RGB);\n  }\n  get sheenColorTexture(): TextureInfo {\n    this[$ensureMaterialIsLoaded]();\n    return this[$pbrTextures].get(TextureUsage.SheenColor)!;\n  }\n\n  get sheenRoughnessFactor(): number {\n    this[$ensureMaterialIsLoaded]();\n    return this[$backingThreeMaterial].sheenRoughness;\n  }\n\n  get sheenRoughnessTexture(): TextureInfo {\n    this[$ensureMaterialIsLoaded]();\n    return this[$pbrTextures].get(TextureUsage.SheenRoughness)!;\n  }\n\n  setSheenColorFactor(rgb: RGB|string) {\n    this[$ensureMaterialIsLoaded]();\n    const color = this.colorFromRgb(rgb);\n    for (const material of this[$correlatedObjects] as\n         Set<MeshPhysicalMaterial>) {\n      material.sheenColor.set(color);\n      // Three.js GLTFExporter checks for internal sheen value.\n      material.sheen = 1;\n    }\n    this[$onUpdate]();\n  }\n\n  setSheenRoughnessFactor(roughness: number) {\n    this[$ensureMaterialIsLoaded]();\n    for (const material of this[$correlatedObjects] as\n         Set<MeshPhysicalMaterial>) {\n      material.sheenRoughness = roughness;\n      // Three.js GLTFExporter checks for internal sheen value.\n      material.sheen = 1;\n    }\n    this[$onUpdate]();\n  }\n\n  // KHR_materials_transmission\n  get transmissionFactor(): number {\n    this[$ensureMaterialIsLoaded]();\n    return this[$backingThreeMaterial].transmission;\n  }\n\n  get transmissionTexture(): TextureInfo {\n    this[$ensureMaterialIsLoaded]();\n    return this[$pbrTextures].get(TextureUsage.Transmission)!;\n  }\n\n  setTransmissionFactor(transmission: number) {\n    this[$ensureMaterialIsLoaded]();\n    for (const material of this[$correlatedObjects] as\n         Set<MeshPhysicalMaterial>) {\n      material.transmission = transmission;\n    }\n    this[$onUpdate]();\n  }\n\n  // KHR_materials_volume\n  get thicknessFactor(): number {\n    this[$ensureMaterialIsLoaded]();\n    return this[$backingThreeMaterial].thickness;\n  }\n\n  get thicknessTexture(): TextureInfo {\n    this[$ensureMaterialIsLoaded]();\n    return this[$pbrTextures].get(TextureUsage.Thickness)!;\n  }\n\n  get attenuationDistance(): number {\n    this[$ensureMaterialIsLoaded]();\n    return this[$backingThreeMaterial].attenuationDistance;\n  }\n\n  get attenuationColor(): RGB {\n    this[$ensureMaterialIsLoaded]();\n    return (this[$backingThreeMaterial].attenuationColor.toArray() as RGB);\n  }\n\n  setThicknessFactor(thickness: number) {\n    this[$ensureMaterialIsLoaded]();\n    for (const material of this[$correlatedObjects] as\n         Set<MeshPhysicalMaterial>) {\n      material.thickness = thickness;\n    }\n    this[$onUpdate]();\n  }\n\n  setAttenuationDistance(attenuationDistance: number) {\n    this[$ensureMaterialIsLoaded]();\n    for (const material of this[$correlatedObjects] as\n         Set<MeshPhysicalMaterial>) {\n      material.attenuationDistance = attenuationDistance;\n    }\n    this[$onUpdate]();\n  }\n\n  setAttenuationColor(rgb: RGB|string) {\n    this[$ensureMaterialIsLoaded]();\n    const color = this.colorFromRgb(rgb);\n    for (const material of this[$correlatedObjects] as\n         Set<MeshPhysicalMaterial>) {\n      material.attenuationColor.set(color);\n    }\n    this[$onUpdate]();\n  }\n\n  // KHR_materials_specular\n  get specularFactor(): number {\n    this[$ensureMaterialIsLoaded]();\n    return this[$backingThreeMaterial].specularIntensity;\n  }\n\n  get specularTexture(): TextureInfo {\n    this[$ensureMaterialIsLoaded]();\n    return this[$pbrTextures].get(TextureUsage.Specular)!;\n  }\n\n  get specularColorFactor(): RGB {\n    this[$ensureMaterialIsLoaded]();\n    return (this[$backingThreeMaterial].specularColor.toArray() as RGB);\n  }\n\n  get specularColorTexture(): TextureInfo {\n    this[$ensureMaterialIsLoaded]();\n    return this[$pbrTextures].get(TextureUsage.SheenColor)!;\n  }\n\n  setSpecularFactor(specularFactor: number) {\n    this[$ensureMaterialIsLoaded]();\n    for (const material of this[$correlatedObjects] as\n         Set<MeshPhysicalMaterial>) {\n      material.specularIntensity = specularFactor;\n    }\n    this[$onUpdate]();\n  }\n\n  setSpecularColorFactor(rgb: RGB|string) {\n    this[$ensureMaterialIsLoaded]();\n    const color = this.colorFromRgb(rgb);\n    for (const material of this[$correlatedObjects] as\n         Set<MeshPhysicalMaterial>) {\n      material.specularColor.set(color);\n    }\n    this[$onUpdate]();\n  }\n\n  // KHR_materials_iridescence\n  get iridescenceFactor(): number {\n    this[$ensureMaterialIsLoaded]();\n    return this[$backingThreeMaterial].iridescence;\n  }\n\n  get iridescenceTexture(): TextureInfo {\n    this[$ensureMaterialIsLoaded]();\n    return this[$pbrTextures].get(TextureUsage.Iridescence)!;\n  }\n\n  get iridescenceIor(): number {\n    this[$ensureMaterialIsLoaded]();\n    return this[$backingThreeMaterial].iridescenceIOR;\n  }\n\n  get iridescenceThicknessMinimum(): number {\n    this[$ensureMaterialIsLoaded]();\n    return this[$backingThreeMaterial].iridescenceThicknessRange[0];\n  }\n\n  get iridescenceThicknessMaximum(): number {\n    this[$ensureMaterialIsLoaded]();\n    return this[$backingThreeMaterial].iridescenceThicknessRange[1];\n  }\n\n  get iridescenceThicknessTexture(): TextureInfo {\n    this[$ensureMaterialIsLoaded]();\n    return this[$pbrTextures].get(TextureUsage.IridescenceThickness)!;\n  }\n\n  setIridescenceFactor(iridescence: number) {\n    this[$ensureMaterialIsLoaded]();\n    for (const material of this[$correlatedObjects] as\n         Set<MeshPhysicalMaterial>) {\n      material.iridescence = iridescence;\n    }\n    this[$onUpdate]();\n  }\n\n  setIridescenceIor(ior: number) {\n    this[$ensureMaterialIsLoaded]();\n    for (const material of this[$correlatedObjects] as\n         Set<MeshPhysicalMaterial>) {\n      material.iridescenceIOR = ior;\n    }\n    this[$onUpdate]();\n  }\n\n  setIridescenceThicknessMinimum(thicknessMin: number) {\n    this[$ensureMaterialIsLoaded]();\n    for (const material of this[$correlatedObjects] as\n         Set<MeshPhysicalMaterial>) {\n      material.iridescenceThicknessRange[0] = thicknessMin;\n    }\n    this[$onUpdate]();\n  }\n\n  setIridescenceThicknessMaximum(thicknessMax: number) {\n    this[$ensureMaterialIsLoaded]();\n    for (const material of this[$correlatedObjects] as\n         Set<MeshPhysicalMaterial>) {\n      material.iridescenceThicknessRange[1] = thicknessMax;\n    }\n    this[$onUpdate]();\n  }\n\n  // KHR_materials_anisotropy\n  get anisotropyStrength(): number {\n    this[$ensureMaterialIsLoaded]();\n    return (this[$backingThreeMaterial] as any).anisotropy;\n  }\n\n  get anisotropyRotation(): number {\n    this[$ensureMaterialIsLoaded]();\n    return (this[$backingThreeMaterial] as any).anisotropyRotation;\n  }\n\n  get anisotropyTexture(): TextureInfo {\n    this[$ensureMaterialIsLoaded]();\n    return this[$pbrTextures].get(TextureUsage.Anisotropy)!;\n  }\n\n  setAnisotropyStrength(strength: number) {\n    this[$ensureMaterialIsLoaded]();\n    for (const material of this[$correlatedObjects] as\n         Set<MeshPhysicalMaterial>) {\n      (material as any).anisotropy = strength;\n    }\n    this[$onUpdate]();\n  }\n\n  setAnisotropyRotation(rotation: number) {\n    this[$ensureMaterialIsLoaded]();\n    for (const material of this[$correlatedObjects] as\n         Set<MeshPhysicalMaterial>) {\n      (material as any).anisotropyRotation = rotation;\n    }\n    this[$onUpdate]();\n  }\n}\n"]}