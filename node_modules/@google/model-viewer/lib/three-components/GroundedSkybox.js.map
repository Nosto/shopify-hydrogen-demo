{"version":3,"file":"GroundedSkybox.js","sourceRoot":"","sources":["../../src/three-components/GroundedSkybox.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {BufferAttribute, Mesh, MeshBasicMaterial, SphereGeometry, Texture, Vector3} from 'three';\n\nexport class GroundedSkybox extends Mesh {\n  private height = 0;\n  private radius = 0;\n  private resolution = 0;\n\n  constructor() {\n    super(undefined, new MeshBasicMaterial({depthWrite: false}));\n    this.userData.noHit = true;\n  }\n\n  get map() {\n    return (this.material as MeshBasicMaterial).map;\n  }\n\n  set map(skybox: Texture|null) {\n    (this.material as MeshBasicMaterial).map = skybox;\n  }\n\n  isUsable() {\n    return this.height > 0 && this.radius > 0 && this.geometry != null &&\n        this.map != null;\n  }\n\n  updateGeometry(height = this.height, radius = this.radius, resolution = 128) {\n    if (height != this.height || radius != this.radius ||\n        resolution != this.resolution) {\n      this.height = height;\n      this.radius = radius;\n      this.resolution = resolution;\n      if (height > 0 && radius > 0) {\n        this.geometry.dispose();\n        this.geometry = makeGeometry(height, radius, resolution);\n      }\n    }\n  }\n}\n\nfunction makeGeometry(height: number, radius: number, resolution: number) {\n  const geometry = new SphereGeometry(radius, 2 * resolution, resolution);\n  geometry.scale(1, 1, -1);\n\n  const pos = geometry.getAttribute('position') as BufferAttribute;\n  const tmp = new Vector3();\n  for (let i = 0; i < pos.count; ++i) {\n    tmp.fromBufferAttribute(pos, i);\n    if (tmp.y < 0) {\n      // Smooth out the transition from flat floor to sphere:\n      const y1 = -height * 3 / 2;\n      const f =\n          tmp.y < y1 ? -height / tmp.y : (1 - tmp.y * tmp.y / (3 * y1 * y1));\n      tmp.multiplyScalar(f);\n      tmp.toArray(pos.array, 3 * i);\n    }\n  }\n  pos.needsUpdate = true;\n\n  return geometry;\n}"]}