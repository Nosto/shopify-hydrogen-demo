import {
  __commonJS,
  __toESM
} from "./chunk-C5HKJHC6.js";

// browser-external:url
var require_url = __commonJS({
  "browser-external:url"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "url" has been externalized for browser compatibility. Cannot access "url.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:path
var require_path = __commonJS({
  "browser-external:path"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "path" has been externalized for browser compatibility. Cannot access "path.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:fs/promises
var require_promises = __commonJS({
  "browser-external:fs/promises"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "fs/promises" has been externalized for browser compatibility. Cannot access "fs/promises.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/@shopify/hydrogen/dist/development/get-virtual-routes-6PVSMJPH.js
var import_url = __toESM(require_url(), 1);
var import_path = __toESM(require_path(), 1);
var import_promises = __toESM(require_promises(), 1);
var VIRTUAL_ROUTES_DIR = "vite/virtual-routes/routes";
var VIRTUAL_ROUTES_ROUTES_DIR_PARTS = [
  "vite",
  "virtual-routes",
  "routes"
];
var VIRTUAL_ROUTES_DIR_PARTS = ["vite", "virtual-routes"];
var VIRTUAL_ROOT = "vite/virtual-routes/virtual-root";
function getVirtualRoutesPath(pathParts, forFile) {
  const basePath = new URL("../", import.meta.url);
  const virtualRoutesPath = pathParts.reduce((working, dirPart) => {
    return new URL(`${dirPart}/`, working);
  }, basePath);
  return new URL(forFile, virtualRoutesPath).pathname.replace(
    /^\/[a-zA-Z]:\//,
    "/"
  );
}
async function getVirtualRoutesV3() {
  return {
    routes: [
      {
        id: `${VIRTUAL_ROUTES_DIR}/graphiql`,
        path: "graphiql",
        file: getVirtualRoutesPath(
          VIRTUAL_ROUTES_ROUTES_DIR_PARTS,
          "graphiql.jsx"
        ),
        index: false
      },
      {
        id: `${VIRTUAL_ROUTES_DIR}/subrequest-profiler`,
        path: "subrequest-profiler",
        file: getVirtualRoutesPath(
          VIRTUAL_ROUTES_ROUTES_DIR_PARTS,
          "subrequest-profiler.jsx"
        ),
        index: false
      },
      {
        id: `${VIRTUAL_ROUTES_DIR}/[.]well-known.appspecific.com[.]chrome[.]devtools[.]json`,
        path: ".well-known/appspecific/com.chrome.devtools.json",
        file: getVirtualRoutesPath(
          VIRTUAL_ROUTES_ROUTES_DIR_PARTS,
          "[.]well-known.appspecific.com[.]chrome[.]devtools[.]json.jsx"
        ),
        index: false
      },
      {
        id: `${VIRTUAL_ROUTES_DIR}/index`,
        path: "",
        file: getVirtualRoutesPath(
          VIRTUAL_ROUTES_ROUTES_DIR_PARTS,
          "index.jsx"
        ),
        index: true
      }
    ],
    layout: {
      file: getVirtualRoutesPath(VIRTUAL_ROUTES_DIR_PARTS, "layout.jsx")
    }
  };
}
var VIRTUAL_ROUTES_DIR_ORIG = "virtual-routes/routes";
var VIRTUAL_ROOT_ORIG = "virtual-routes/virtual-root-with-layout";
async function getVirtualRoutes() {
  const distPath = import_path.default.dirname((0, import_url.fileURLToPath)(import.meta.url));
  const virtualRoutesPath = import_path.default.join(distPath, VIRTUAL_ROUTES_DIR_ORIG);
  const routes = await (0, import_promises.readdir)(virtualRoutesPath, { recursive: true }).then(
    (files) => files.map((relativeFilePath) => {
      const absoluteFilePath = import_path.default.join(virtualRoutesPath, relativeFilePath);
      const id = relativeFilePath.replace(/\.[jt]sx?$/, "").replaceAll("\\", "/");
      const isIndex = /(^|\/)index$/.test(id);
      const routePath = id.replace(/(^|\/)index$/, "");
      return {
        id: `${VIRTUAL_ROUTES_DIR_ORIG}/${id}`,
        path: routePath,
        file: absoluteFilePath,
        index: isIndex
      };
    })
  );
  return {
    routes,
    root: {
      id: VIRTUAL_ROOT_ORIG,
      path: "",
      file: import_path.default.join(distPath, VIRTUAL_ROOT_ORIG + ".jsx")
    }
  };
}
export {
  VIRTUAL_ROOT,
  VIRTUAL_ROOT_ORIG,
  VIRTUAL_ROUTES_DIR,
  VIRTUAL_ROUTES_DIR_ORIG,
  VIRTUAL_ROUTES_DIR_PARTS,
  VIRTUAL_ROUTES_ROUTES_DIR_PARTS,
  getVirtualRoutes,
  getVirtualRoutesV3
};
//# sourceMappingURL=get-virtual-routes-6PVSMJPH-OTZNXGSY.js.map
