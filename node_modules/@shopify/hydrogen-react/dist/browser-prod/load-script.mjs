import { useState, useEffect } from "react";
const SCRIPTS_LOADED = {};
function loadScript(src, options) {
  const isScriptLoaded = SCRIPTS_LOADED[src];
  if (isScriptLoaded) {
    return isScriptLoaded;
  }
  const promise = new Promise((resolve, reject) => {
    const script = document.createElement("script");
    if (options == null ? void 0 : options.module) {
      script.type = "module";
    } else {
      script.type = "text/javascript";
    }
    script.src = src;
    script.onload = () => {
      resolve(true);
    };
    script.onerror = () => {
      reject(false);
    };
    if ((options == null ? void 0 : options.in) === "head") {
      document.head.appendChild(script);
    } else {
      document.body.appendChild(script);
    }
    const attributes = options == null ? void 0 : options.attributes;
    if (attributes) {
      Object.keys(attributes).forEach((key) => {
        script.setAttribute(key, attributes[key]);
      });
    }
  });
  SCRIPTS_LOADED[src] = promise;
  return promise;
}
function useLoadScript(url, options) {
  const [status, setStatus] = useState("loading");
  useEffect(
    () => {
      loadScript(url, options).then(() => setStatus("done")).catch(() => setStatus("error"));
    },
    // Ignore options changes since it won't trigger a new load.
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [url]
  );
  return status;
}
export {
  loadScript,
  useLoadScript
};
//# sourceMappingURL=load-script.mjs.map
