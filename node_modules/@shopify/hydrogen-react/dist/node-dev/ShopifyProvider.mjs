import { jsx } from "react/jsx-runtime";
import { useMemo, createContext, useContext } from "react";
import { SFAPI_VERSION } from "./storefront-api-constants.mjs";
import { getPublicTokenHeadersRaw } from "./storefront-client.mjs";
const defaultShopifyContext = {
  storeDomain: "test",
  storefrontToken: "abc123",
  storefrontApiVersion: SFAPI_VERSION,
  countryIsoCode: "US",
  languageIsoCode: "EN",
  getStorefrontApiUrl() {
    return "";
  },
  getPublicTokenHeaders() {
    return {};
  },
  getShopifyDomain() {
    return "";
  }
};
const ShopifyContext = createContext(
  defaultShopifyContext
);
function ShopifyProvider({
  children,
  ...shopifyConfig
}) {
  if (!shopifyConfig.countryIsoCode || !shopifyConfig.languageIsoCode || !shopifyConfig.storeDomain || !shopifyConfig.storefrontToken || !shopifyConfig.storefrontApiVersion) {
    throw new Error(
      `Please provide the necessary props to '<ShopifyProvider/>'`
    );
  }
  if (shopifyConfig.storefrontApiVersion !== SFAPI_VERSION) {
    console.warn(
      `<ShopifyProvider/>: This version of Hydrogen React is built for Shopify's Storefront API version ${SFAPI_VERSION}, but it looks like you're using version ${shopifyConfig.storefrontApiVersion}. There may be issues or bugs if you use a mismatched version of Hydrogen React and the Storefront API.`
    );
  }
  const finalConfig = useMemo(() => {
    function getShopifyDomain(overrideProps) {
      const domain = (overrideProps == null ? void 0 : overrideProps.storeDomain) ?? shopifyConfig.storeDomain;
      return domain.includes("://") ? domain : `https://${domain}`;
    }
    return {
      ...shopifyConfig,
      getPublicTokenHeaders(overrideProps) {
        return getPublicTokenHeadersRaw(
          overrideProps.contentType,
          shopifyConfig.storefrontApiVersion,
          overrideProps.storefrontToken ?? shopifyConfig.storefrontToken
        );
      },
      getShopifyDomain,
      getStorefrontApiUrl(overrideProps) {
        const finalDomainUrl = getShopifyDomain({
          storeDomain: (overrideProps == null ? void 0 : overrideProps.storeDomain) ?? shopifyConfig.storeDomain
        });
        return `${finalDomainUrl}${finalDomainUrl.endsWith("/") ? "" : "/"}api/${(overrideProps == null ? void 0 : overrideProps.storefrontApiVersion) ?? shopifyConfig.storefrontApiVersion}/graphql.json`;
      }
    };
  }, [shopifyConfig]);
  return /* @__PURE__ */ jsx(ShopifyContext.Provider, { value: finalConfig, children });
}
function useShop() {
  const shopContext = useContext(ShopifyContext);
  if (!shopContext) {
    throw new Error(`'useShop()' must be a descendent of <ShopifyProvider/>`);
  }
  return shopContext;
}
export {
  ShopifyProvider,
  defaultShopifyContext,
  useShop
};
//# sourceMappingURL=ShopifyProvider.mjs.map
