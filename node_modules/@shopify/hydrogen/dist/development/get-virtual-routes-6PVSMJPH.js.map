{"version":3,"sources":["../../src/vite/get-virtual-routes.ts"],"names":[],"mappings":";;;;;AAKO,IAAM,kBAAA,GAAqB;AAC3B,IAAM,+BAAA,GAAkC;AAAA,EAC7C,MAAA;AAAA,EACA,gBAAA;AAAA,EACA;AACF;AACO,IAAM,wBAAA,GAA2B,CAAC,MAAA,EAAQ,gBAAgB;AAC1D,IAAM,YAAA,GAAe;AAE5B,SAAS,oBAAA,CACP,WACA,OAAA,EACQ;AACR,EAAA,MAAM,QAAA,GAAW,IAAI,GAAA,CAAI,KAAA,EAAO,YAAY,GAAG,CAAA;AAC/C,EAAA,MAAM,iBAAA,GAAoB,SAAA,CAAU,MAAA,CAAO,CAAC,SAAS,OAAA,KAAY;AAC/D,IAAA,OAAO,IAAI,GAAA,CAAI,CAAA,EAAG,OAAO,KAAK,OAAO,CAAA;AAAA,EACvC,GAAG,QAAQ,CAAA;AAGX,EAAA,OAAO,IAAI,GAAA,CAAI,OAAA,EAAS,iBAAiB,EAAE,QAAA,CAAS,OAAA;AAAA,IAClD,gBAAA;AAAA,IACA;AAAA,GACF;AACF;AAEA,eAAsB,kBAAA,GAAqB;AACzC,EAAA,OAAO;AAAA,IACL,MAAA,EAAQ;AAAA,MACN;AAAA,QACE,EAAA,EAAI,GAAG,kBAAkB,CAAA,SAAA,CAAA;AAAA,QACzB,IAAA,EAAM,UAAA;AAAA,QACN,IAAA,EAAM,oBAAA;AAAA,UACJ,+BAAA;AAAA,UACA;AAAA,SACF;AAAA,QACA,KAAA,EAAO;AAAA,OACT;AAAA,MACA;AAAA,QACE,EAAA,EAAI,GAAG,kBAAkB,CAAA,oBAAA,CAAA;AAAA,QACzB,IAAA,EAAM,qBAAA;AAAA,QACN,IAAA,EAAM,oBAAA;AAAA,UACJ,+BAAA;AAAA,UACA;AAAA,SACF;AAAA,QACA,KAAA,EAAO;AAAA,OACT;AAAA,MACA;AAAA,QACE,EAAA,EAAI,GAAG,kBAAkB,CAAA,yDAAA,CAAA;AAAA,QACzB,IAAA,EAAM,kDAAA;AAAA,QACN,IAAA,EAAM,oBAAA;AAAA,UACJ,+BAAA;AAAA,UACA;AAAA,SACF;AAAA,QACA,KAAA,EAAO;AAAA,OACT;AAAA,MACA;AAAA,QACE,EAAA,EAAI,GAAG,kBAAkB,CAAA,MAAA,CAAA;AAAA,QACzB,IAAA,EAAM,EAAA;AAAA,QACN,IAAA,EAAM,oBAAA;AAAA,UACJ,+BAAA;AAAA,UACA;AAAA,SACF;AAAA,QACA,KAAA,EAAO;AAAA;AACT,KACF;AAAA,IACA,MAAA,EAAQ;AAAA,MACN,IAAA,EAAM,oBAAA,CAAqB,wBAAA,EAA0B,YAAY;AAAA;AACnE,GACF;AACF;AAGO,IAAM,uBAAA,GAA0B;AAChC,IAAM,iBAAA,GAAoB;AAEjC,eAAsB,gBAAA,GAAmB;AACvC,EAAA,MAAM,WAAW,IAAA,CAAK,OAAA,CAAQ,aAAA,CAAc,MAAA,CAAA,IAAA,CAAY,GAAG,CAAC,CAAA;AAC5D,EAAA,MAAM,iBAAA,GAAoB,IAAA,CAAK,IAAA,CAAK,QAAA,EAAU,uBAAuB,CAAA;AAErE,EAAA,MAAM,MAAA,GAAS,MAAM,OAAA,CAAQ,iBAAA,EAAmB,EAAC,SAAA,EAAW,IAAA,EAAK,CAAA,CAAE,IAAA;AAAA,IACjE,CAAC,KAAA,KACC,KAAA,CAAM,GAAA,CAAI,CAAC,gBAAA,KAAqB;AAC9B,MAAA,MAAM,gBAAA,GAAmB,IAAA,CAAK,IAAA,CAAK,iBAAA,EAAmB,gBAAgB,CAAA;AACtE,MAAA,MAAM,EAAA,GAAK,iBACR,OAAA,CAAQ,YAAA,EAAc,EAAE,CAAA,CACxB,UAAA,CAAW,MAAM,GAAG,CAAA;AACvB,MAAA,MAAM,OAAA,GAAU,cAAA,CAAe,IAAA,CAAK,EAAE,CAAA;AACtC,MAAA,MAAM,SAAA,GAAY,EAAA,CAAG,OAAA,CAAQ,cAAA,EAAgB,EAAE,CAAA;AAE/C,MAAA,OAAO;AAAA,QACL,EAAA,EAAI,CAAA,EAAG,uBAAuB,CAAA,CAAA,EAAI,EAAE,CAAA,CAAA;AAAA,QACpC,IAAA,EAAM,SAAA;AAAA,QACN,IAAA,EAAM,gBAAA;AAAA,QACN,KAAA,EAAO;AAAA,OACT;AAAA,IACF,CAAC;AAAA,GACL;AAEA,EAAA,OAAO;AAAA,IACL,MAAA;AAAA,IACA,IAAA,EAAM;AAAA,MACJ,EAAA,EAAI,iBAAA;AAAA,MACJ,IAAA,EAAM,EAAA;AAAA,MACN,IAAA,EAAM,IAAA,CAAK,IAAA,CAAK,QAAA,EAAU,oBAAoB,MAAM;AAAA;AACtD,GACF;AACF","file":"get-virtual-routes-6PVSMJPH.js","sourcesContent":["import {fileURLToPath} from 'node:url';\nimport path from 'node:path';\nimport {readdir} from 'node:fs/promises';\n\n// v3_routeConfig virtual routes constants\nexport const VIRTUAL_ROUTES_DIR = 'vite/virtual-routes/routes';\nexport const VIRTUAL_ROUTES_ROUTES_DIR_PARTS = [\n  'vite',\n  'virtual-routes',\n  'routes',\n];\nexport const VIRTUAL_ROUTES_DIR_PARTS = ['vite', 'virtual-routes'];\nexport const VIRTUAL_ROOT = 'vite/virtual-routes/virtual-root';\n\nfunction getVirtualRoutesPath(\n  pathParts: Array<string>,\n  forFile: string,\n): string {\n  const basePath = new URL('../', import.meta.url);\n  const virtualRoutesPath = pathParts.reduce((working, dirPart) => {\n    return new URL(`${dirPart}/`, working);\n  }, basePath);\n\n  // Getting rid of the drive path (ie. '/C:/') in windows\n  return new URL(forFile, virtualRoutesPath).pathname.replace(\n    /^\\/[a-zA-Z]:\\//,\n    '/',\n  );\n}\n\nexport async function getVirtualRoutesV3() {\n  return {\n    routes: [\n      {\n        id: `${VIRTUAL_ROUTES_DIR}/graphiql`,\n        path: 'graphiql',\n        file: getVirtualRoutesPath(\n          VIRTUAL_ROUTES_ROUTES_DIR_PARTS,\n          'graphiql.jsx',\n        ),\n        index: false,\n      },\n      {\n        id: `${VIRTUAL_ROUTES_DIR}/subrequest-profiler`,\n        path: 'subrequest-profiler',\n        file: getVirtualRoutesPath(\n          VIRTUAL_ROUTES_ROUTES_DIR_PARTS,\n          'subrequest-profiler.jsx',\n        ),\n        index: false,\n      },\n      {\n        id: `${VIRTUAL_ROUTES_DIR}/[.]well-known.appspecific.com[.]chrome[.]devtools[.]json`,\n        path: '.well-known/appspecific/com.chrome.devtools.json',\n        file: getVirtualRoutesPath(\n          VIRTUAL_ROUTES_ROUTES_DIR_PARTS,\n          '[.]well-known.appspecific.com[.]chrome[.]devtools[.]json.jsx',\n        ),\n        index: false,\n      },\n      {\n        id: `${VIRTUAL_ROUTES_DIR}/index`,\n        path: '',\n        file: getVirtualRoutesPath(\n          VIRTUAL_ROUTES_ROUTES_DIR_PARTS,\n          'index.jsx',\n        ),\n        index: true,\n      },\n    ],\n    layout: {\n      file: getVirtualRoutesPath(VIRTUAL_ROUTES_DIR_PARTS, 'layout.jsx'),\n    },\n  };\n}\n\n// original virtual routes constants\nexport const VIRTUAL_ROUTES_DIR_ORIG = 'virtual-routes/routes';\nexport const VIRTUAL_ROOT_ORIG = 'virtual-routes/virtual-root-with-layout';\n\nexport async function getVirtualRoutes() {\n  const distPath = path.dirname(fileURLToPath(import.meta.url));\n  const virtualRoutesPath = path.join(distPath, VIRTUAL_ROUTES_DIR_ORIG);\n\n  const routes = await readdir(virtualRoutesPath, {recursive: true}).then(\n    (files) =>\n      files.map((relativeFilePath) => {\n        const absoluteFilePath = path.join(virtualRoutesPath, relativeFilePath);\n        const id = relativeFilePath\n          .replace(/\\.[jt]sx?$/, '')\n          .replaceAll('\\\\', '/');\n        const isIndex = /(^|\\/)index$/.test(id);\n        const routePath = id.replace(/(^|\\/)index$/, '');\n\n        return {\n          id: `${VIRTUAL_ROUTES_DIR_ORIG}/${id}`,\n          path: routePath,\n          file: absoluteFilePath,\n          index: isIndex,\n        };\n      }),\n  );\n\n  return {\n    routes,\n    root: {\n      id: VIRTUAL_ROOT_ORIG,\n      path: '',\n      file: path.join(distPath, VIRTUAL_ROOT_ORIG + '.jsx'),\n    },\n  };\n}\n"]}