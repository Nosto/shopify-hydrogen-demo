{"version":3,"sources":["../../src/vite/get-virtual-routes.ts"],"names":["VIRTUAL_ROUTES_DIR","VIRTUAL_ROUTES_ROUTES_DIR_PARTS","VIRTUAL_ROUTES_DIR_PARTS","VIRTUAL_ROOT","getVirtualRoutesPath","pathParts","forFile","basePath","virtualRoutesPath","working","dirPart","getVirtualRoutesV3","VIRTUAL_ROUTES_DIR_ORIG","VIRTUAL_ROOT_ORIG","getVirtualRoutes","distPath","path","fileURLToPath","readdir","files","relativeFilePath","absoluteFilePath","id","isIndex","routePath"],"mappings":"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","file":"get-virtual-routes-JVKSNI4M.js","sourcesContent":["import {fileURLToPath} from 'node:url';\nimport path from 'node:path';\nimport {readdir} from 'node:fs/promises';\n\n// v3_routeConfig virtual routes constants\nexport const VIRTUAL_ROUTES_DIR = 'vite/virtual-routes/routes';\nexport const VIRTUAL_ROUTES_ROUTES_DIR_PARTS = [\n  'vite',\n  'virtual-routes',\n  'routes',\n];\nexport const VIRTUAL_ROUTES_DIR_PARTS = ['vite', 'virtual-routes'];\nexport const VIRTUAL_ROOT = 'vite/virtual-routes/virtual-root';\n\nfunction getVirtualRoutesPath(\n  pathParts: Array<string>,\n  forFile: string,\n): string {\n  const basePath = new URL('../', import.meta.url);\n  const virtualRoutesPath = pathParts.reduce((working, dirPart) => {\n    return new URL(`${dirPart}/`, working);\n  }, basePath);\n\n  // Getting rid of the drive path (ie. '/C:/') in windows\n  return new URL(forFile, virtualRoutesPath).pathname.replace(\n    /^\\/[a-zA-Z]:\\//,\n    '/',\n  );\n}\n\nexport async function getVirtualRoutesV3() {\n  return {\n    routes: [\n      {\n        id: `${VIRTUAL_ROUTES_DIR}/graphiql`,\n        path: 'graphiql',\n        file: getVirtualRoutesPath(\n          VIRTUAL_ROUTES_ROUTES_DIR_PARTS,\n          'graphiql.jsx',\n        ),\n        index: false,\n      },\n      {\n        id: `${VIRTUAL_ROUTES_DIR}/subrequest-profiler`,\n        path: 'subrequest-profiler',\n        file: getVirtualRoutesPath(\n          VIRTUAL_ROUTES_ROUTES_DIR_PARTS,\n          'subrequest-profiler.jsx',\n        ),\n        index: false,\n      },\n      {\n        id: `${VIRTUAL_ROUTES_DIR}/[.]well-known.appspecific.com[.]chrome[.]devtools[.]json`,\n        path: '.well-known/appspecific/com.chrome.devtools.json',\n        file: getVirtualRoutesPath(\n          VIRTUAL_ROUTES_ROUTES_DIR_PARTS,\n          '[.]well-known.appspecific.com[.]chrome[.]devtools[.]json.jsx',\n        ),\n        index: false,\n      },\n      {\n        id: `${VIRTUAL_ROUTES_DIR}/index`,\n        path: '',\n        file: getVirtualRoutesPath(\n          VIRTUAL_ROUTES_ROUTES_DIR_PARTS,\n          'index.jsx',\n        ),\n        index: true,\n      },\n    ],\n    layout: {\n      file: getVirtualRoutesPath(VIRTUAL_ROUTES_DIR_PARTS, 'layout.jsx'),\n    },\n  };\n}\n\n// original virtual routes constants\nexport const VIRTUAL_ROUTES_DIR_ORIG = 'virtual-routes/routes';\nexport const VIRTUAL_ROOT_ORIG = 'virtual-routes/virtual-root-with-layout';\n\nexport async function getVirtualRoutes() {\n  const distPath = path.dirname(fileURLToPath(import.meta.url));\n  const virtualRoutesPath = path.join(distPath, VIRTUAL_ROUTES_DIR_ORIG);\n\n  const routes = await readdir(virtualRoutesPath, {recursive: true}).then(\n    (files) =>\n      files.map((relativeFilePath) => {\n        const absoluteFilePath = path.join(virtualRoutesPath, relativeFilePath);\n        const id = relativeFilePath\n          .replace(/\\.[jt]sx?$/, '')\n          .replaceAll('\\\\', '/');\n        const isIndex = /(^|\\/)index$/.test(id);\n        const routePath = id.replace(/(^|\\/)index$/, '');\n\n        return {\n          id: `${VIRTUAL_ROUTES_DIR_ORIG}/${id}`,\n          path: routePath,\n          file: absoluteFilePath,\n          index: isIndex,\n        };\n      }),\n  );\n\n  return {\n    routes,\n    root: {\n      id: VIRTUAL_ROOT_ORIG,\n      path: '',\n      file: path.join(distPath, VIRTUAL_ROOT_ORIG + '.jsx'),\n    },\n  };\n}\n"]}