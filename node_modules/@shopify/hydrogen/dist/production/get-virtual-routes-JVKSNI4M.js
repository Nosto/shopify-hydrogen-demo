import {fileURLToPath}from'url';import i from'path';import {readdir}from'fs/promises';var s="vite/virtual-routes/routes",n=["vite","virtual-routes","routes"],m=["vite","virtual-routes"],_="vite/virtual-routes/virtual-root";function t(e,r){let p=new URL("../",import.meta.url),a=e.reduce((o,u)=>new URL(`${u}/`,o),p);return new URL(r,a).pathname.replace(/^\/[a-zA-Z]:\//,"/")}async function j(){return {routes:[{id:`${s}/graphiql`,path:"graphiql",file:t(n,"graphiql.jsx"),index:false},{id:`${s}/subrequest-profiler`,path:"subrequest-profiler",file:t(n,"subrequest-profiler.jsx"),index:false},{id:`${s}/[.]well-known.appspecific.com[.]chrome[.]devtools[.]json`,path:".well-known/appspecific/com.chrome.devtools.json",file:t(n,"[.]well-known.appspecific.com[.]chrome[.]devtools[.]json.jsx"),index:false},{id:`${s}/index`,path:"",file:t(n,"index.jsx"),index:true}],layout:{file:t(m,"layout.jsx")}}}var c="virtual-routes/routes",R="virtual-routes/virtual-root-with-layout";async function I(){let e=i.dirname(fileURLToPath(import.meta.url)),r=i.join(e,c);return {routes:await readdir(r,{recursive:true}).then(a=>a.map(o=>{let u=i.join(r,o),l=o.replace(/\.[jt]sx?$/,"").replaceAll("\\","/"),d=/(^|\/)index$/.test(l),x=l.replace(/(^|\/)index$/,"");return {id:`${c}/${l}`,path:x,file:u,index:d}})),root:{id:R,path:"",file:i.join(e,R+".jsx")}}}
export{_ as VIRTUAL_ROOT,R as VIRTUAL_ROOT_ORIG,s as VIRTUAL_ROUTES_DIR,c as VIRTUAL_ROUTES_DIR_ORIG,m as VIRTUAL_ROUTES_DIR_PARTS,n as VIRTUAL_ROUTES_ROUTES_DIR_PARTS,I as getVirtualRoutes,j as getVirtualRoutesV3};//# sourceMappingURL=get-virtual-routes-JVKSNI4M.js.map
//# sourceMappingURL=get-virtual-routes-JVKSNI4M.js.map