{"version":3,"sources":["../../src/seo/log-seo-tags.ts"],"names":["Logger","headTags","logSeoTags","headingStyle","titleStyle","tag","key","val","urlKey","fetchImage","image","imageStyle","err","url","buff","arrayBufferToBase64","buffer","binary","bytes","len","index"],"mappings":"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","file":"log-seo-tags-TY72EQWZ.js","sourcesContent":["import type {CustomHeadTagObject} from './generate-seo-tags';\n\nexport default function Logger({headTags}: {headTags: CustomHeadTagObject[]}) {\n  logSeoTags(headTags);\n\n  return null;\n}\n\nconst headingStyle = 'text-transform: uppercase;';\nconst titleStyle =\n  'text-transform: uppercase; font-weight: bold; text-transform: uppercase;font-weight: bold';\n\nexport function logSeoTags(headTags: CustomHeadTagObject[]) {\n  console.log(' ');\n  console.log('%cSEO Meta Tags', `${titleStyle}`);\n  console.log(' ');\n\n  headTags.forEach((tag) => {\n    if (tag.tag === 'script') {\n      console.log(`%c• JSON LD `, headingStyle);\n\n      if (tag.children) {\n        try {\n          console.table(JSON.parse(tag.children), ['name', 'content']);\n        } catch {\n          console.log(tag.children);\n        }\n      }\n    } else {\n      console.log(`%c• ${tag.tag} `, headingStyle);\n\n      if (tag.children) {\n        if (typeof tag.children === 'string') {\n          console.log(`↳ ${tag.children}`);\n        } else {\n          try {\n            Object.entries(JSON.parse(tag.children)).map(([key, val]) =>\n              console.log(`↳ ${val}`),\n            );\n          } catch {\n            console.log(tag.children);\n          }\n        }\n      }\n\n      if (tag.props.property === 'og:image:url') {\n        const urlKey = tag.props.content as string;\n\n        fetchImage(urlKey)\n          .then((image) => {\n            const imageStyle = `font-size: 400px; padding: 10px; background: white url(${image}) no-repeat center; background-size: contain;`;\n\n            console.log(`%c• Share image preview`, headingStyle);\n            console.log('%c  ', imageStyle);\n            console.log(`↳ ${urlKey}`);\n          })\n          .catch((err) => {\n            console.error(err);\n          });\n      }\n\n      Object.entries(tag.props).map(([key, val]) => {\n        console.log(`↳ ${key} → ${val}`);\n      });\n    }\n    console.log(' ');\n  });\n}\n\nasync function fetchImage(url: string) {\n  const result = await fetch(url);\n  const data = await result.blob();\n  const buff = await data.arrayBuffer();\n  const base64String = arrayBufferToBase64(buff);\n\n  return `data:image/png;base64,${base64String}`;\n}\n\nfunction arrayBufferToBase64(buffer: ArrayBuffer) {\n  let binary = '';\n  const bytes = new Uint8Array(buffer);\n  const len = bytes.byteLength;\n\n  for (let index = 0; index < len; index++) {\n    binary += String.fromCharCode(bytes[index]);\n  }\n\n  return btoa(binary);\n}\n"]}