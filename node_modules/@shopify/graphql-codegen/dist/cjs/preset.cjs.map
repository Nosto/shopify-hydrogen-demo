{"version":3,"sources":["../../src/preset.ts"],"names":[],"mappings":"AACA,YAAY,eAAe;AAC3B,YAAY,sBAAsB;AAClC,YAAY,+BAA+B;AAC3C,SAAQ,sBAAqB;AAC7B;AAAA,EACE,UAAU;AAAA,EACV;AAAA,EACA;AAAA,OACK;AAiCP,MAAM,eAAe;AAEd,MAAM,SAA2C;AAAA,EACtD,CAAC,OAAO,IAAI,MAAM,CAAC,GAAG;AAAA,EACtB,uBAAuB,CAAC,YAAY;AAClC,QAAI,CAAC,QAAQ,cAAc,SAAS,OAAO,GAAG;AAC5C,YAAM,IAAI,MAAM,eAAe,uCAAuC;AAAA,IACxE;AAEA,QACE,QAAQ,SAAS,SAAS,KAC1B,OAAO,KAAK,QAAQ,OAAO,EAAE,KAAK,CAAC,MAAM,EAAE,WAAW,YAAY,CAAC,GACnE;AACA,YAAM,IAAI;AAAA,QACR,eACE;AAAA,MACJ;AAAA,IACF;AAEA,UAAM,wBAAwB,eAAe,QAAQ,SAAS;AAC9D,UAAM,UAAU,sBAAsB,IAAI,CAAC,EAAC,OAAM,MAAM,MAAM;AAE9D,UAAM,uBAAuB,QAAQ,aAAa,aAAa;AAC/D,UAAM,kBAAkB,QAAQ,aAAa,aAAa;AAC1D,UAAM,cAAc,CAAC,CAAC,wBAAwB,CAAC,CAAC;AAEhD,UAAM,yBAAyB,QAAQ,aAAa,mBAAmB;AAAA,MACrE,WAAW;AAAA,MACX,cAAc;AAAA,IAChB,CAAC;AAED,UAAM,YAAY;AAAA,MAChB,GAAG,QAAQ;AAAA,MACX,CAAC,KAAK,GAAG;AAAA,MACT,CAAC,YAAY,GAAG;AAAA,MAChB,CAAC,uBAAuB,GAAG;AAAA,MAC3B,CAAC,SAAS,GAAG,EAAC,QAAQ,UAAS;AAAA,IACjC;AAEA,UAAM,UAAyC;AAAA;AAAA,MAE7C;AAAA,QACE,CAAC,KAAK,GAAG;AAAA,UACP,SAAS;AAAA;AAAA;AAAA,QACX;AAAA,MACF;AAAA;AAAA,MAEA,cACI;AAAA,QACE,CAAC,KAAK,GAAG;AAAA,UACP,SAAS,oBAAoB,oBAAoB,UAAU,eAAe;AAAA;AAAA,QAC5E;AAAA,MACF,IACA;AAAA,QACE,CAAC,YAAY,GAAG;AAAA,UACd,gBAAgB;AAAA,UAChB,sBAAsB;AAAA,UACtB,cAAc;AAAA,QAChB;AAAA,MACF;AAAA;AAAA,MAEJ;AAAA,QACE,CAAC,uBAAuB,GAAG;AAAA,UACzB,gBAAgB;AAAA;AAAA,UAChB,iBAAiB;AAAA;AAAA,UACjB,oBAAoB;AAAA;AAAA,UACpB,cAAc,QAAQ,aAAa,4BAA4B;AAAA;AAAA,UAC/D,sBAAsB,cAAc,uBAAuB;AAAA,QAC7D;AAAA,MACF;AAAA;AAAA,MAEA,EAAC,CAAC,SAAS,GAAG,EAAC,uBAAuB,uBAAsB,EAAC;AAAA;AAAA,MAE7D,GAAG,QAAQ;AAAA,IACb;AAEA,WAAO;AAAA,MACL;AAAA,QACE,UAAU,QAAQ;AAAA,QAClB;AAAA,QACA;AAAA,QACA,QAAQ,QAAQ;AAAA,QAChB,QAAQ;AAAA;AAAA,UAEN,mBAAmB;AAAA;AAAA,UAEnB,GAAG,QAAQ;AAAA,QACb;AAAA,QACA,WAAW;AAAA,QACX,oBAAoB,QAAQ;AAAA,MAC9B;AAAA,IACF;AAAA,EACF;AACF","sourcesContent":["import type {Types} from '@graphql-codegen/plugin-helpers';\nimport * as addPlugin from '@graphql-codegen/add';\nimport * as typescriptPlugin from '@graphql-codegen/typescript';\nimport * as typescriptOperationPlugin from '@graphql-codegen/typescript-operations';\nimport {processSources} from './sources.js';\nimport {\n  plugin as dtsPlugin,\n  GENERATED_MUTATION_INTERFACE_NAME,\n  GENERATED_QUERY_INTERFACE_NAME,\n} from './plugin.js';\n\nexport type PresetConfig = {\n  /**\n   * Whether types should be imported or generated inline.\n   */\n  importTypes?: {\n    /**\n     * Name for the variable that contains the imported types.\n     * @example 'StorefrontAPI'\n     */\n    namespace: string;\n    /**\n     * Module to import the types from.\n     * @example '@shopify/hydrogen/storefront-api-types'\n     */\n    from: string;\n  };\n  /**\n   * Whether to skip adding `__typename` to generated operation types.\n   * @default true\n   */\n  skipTypenameInOperations?: boolean;\n  /**\n   * Override the default interface extension.\n   * @example ({queryType}) => `declare module 'my-api' { interface Queries extends ${queryType} {} }`\n   */\n  interfaceExtension: (options: {\n    queryType: string;\n    mutationType: string;\n  }) => string;\n};\n\nconst ERROR_PREFIX = '[@shopify/graphql-codegen]';\n\nexport const preset: Types.OutputPreset<PresetConfig> = {\n  [Symbol.for('name')]: '@shopify/graphql-codegen',\n  buildGeneratesSection: (options) => {\n    if (!options.baseOutputDir.endsWith('.d.ts')) {\n      throw new Error(ERROR_PREFIX + ' target output should be a .d.ts file');\n    }\n\n    if (\n      options.plugins?.length > 0 &&\n      Object.keys(options.plugins).some((p) => p.startsWith('typescript'))\n    ) {\n      throw new Error(\n        ERROR_PREFIX +\n          ' providing additional typescript-based `plugins` leads to duplicated generated types',\n      );\n    }\n\n    const sourcesWithOperations = processSources(options.documents);\n    const sources = sourcesWithOperations.map(({source}) => source);\n\n    const namespacedImportName = options.presetConfig.importTypes?.namespace;\n    const importTypesFrom = options.presetConfig.importTypes?.from;\n    const importTypes = !!namespacedImportName && !!importTypesFrom;\n\n    const interfaceExtensionCode = options.presetConfig.interfaceExtension({\n      queryType: GENERATED_QUERY_INTERFACE_NAME,\n      mutationType: GENERATED_MUTATION_INTERFACE_NAME,\n    });\n\n    const pluginMap = {\n      ...options.pluginMap,\n      [`add`]: addPlugin,\n      [`typescript`]: typescriptPlugin,\n      [`typescript-operations`]: typescriptOperationPlugin,\n      [`gen-dts`]: {plugin: dtsPlugin},\n    };\n\n    const plugins: Array<Types.ConfiguredPlugin> = [\n      // 1. Disable eslint for the generated file\n      {\n        [`add`]: {\n          content: `/* eslint-disable eslint-comments/disable-enable-pair */\\n/* eslint-disable eslint-comments/no-unlimited-disable */\\n/* eslint-disable */`,\n        },\n      },\n      // 2. Import all the generated API types or generate all the types from the schema.\n      importTypes\n        ? {\n            [`add`]: {\n              content: `import type * as ${namespacedImportName} from '${importTypesFrom}';\\n`,\n            },\n          }\n        : {\n            [`typescript`]: {\n              useTypeImports: true,\n              useImplementingTypes: true,\n              enumsAsTypes: true,\n            },\n          },\n      // 3. Generate the operations (i.e. queries, mutations, and fragments types)\n      {\n        [`typescript-operations`]: {\n          useTypeImports: true, // Use `import type` instead of `import`\n          preResolveTypes: false, // Use Pick<...> instead of primitives\n          mergeFragmentTypes: true, // Merge equal fragment interfaces. Avoids adding `| {}` to Metaobject\n          skipTypename: options.presetConfig.skipTypenameInOperations ?? true, // Skip __typename fields\n          namespacedImportName: importTypes ? namespacedImportName : undefined,\n        },\n      },\n      // 4.  Augment query/mutation interfaces with the generated operations\n      {[`gen-dts`]: {sourcesWithOperations, interfaceExtensionCode}},\n      // 5. Custom plugins from the user\n      ...options.plugins,\n    ];\n\n    return [\n      {\n        filename: options.baseOutputDir,\n        plugins,\n        pluginMap,\n        schema: options.schema,\n        config: {\n          // For the TS plugin:\n          defaultScalarType: 'unknown',\n          // Allow overwriting defaults:\n          ...options.config,\n        },\n        documents: sources,\n        documentTransforms: options.documentTransforms,\n      },\n    ];\n  },\n};\n"]}