/// <reference types="node" />
import { EventEmitter } from 'events';
import { Dots, Mouse, RectRenderQueue, Stroke, Text, TooltipField } from '../types';
import { OffscreenRenderEngine } from './offscreen-render-engine';
import { RenderEngine } from './render-engine';
export type RenderOptions = {
    tooltip?: ((data: any, renderEngine: RenderEngine | OffscreenRenderEngine, mouse: Mouse | null) => boolean | void) | boolean;
    timeUnits: string;
};
export type RenderStyles = {
    blockHeight: number;
    blockPaddingLeftRight: number;
    backgroundColor: string;
    font: string;
    fontColor: string;
    tooltipHeaderFontColor: string;
    tooltipBodyFontColor: string;
    tooltipBackgroundColor: string;
    tooltipShadowColor: string;
    tooltipShadowBlur: number;
    tooltipShadowOffsetX: number;
    tooltipShadowOffsetY: number;
    headerHeight: number;
    headerColor: string;
    headerStrokeColor: string;
    headerTitleLeftPadding: number;
};
export type RenderSettings = {
    options?: Partial<RenderOptions>;
    styles?: Partial<RenderStyles>;
};
export declare const defaultRenderSettings: RenderOptions;
export declare const defaultRenderStyles: RenderStyles;
export type Shadow = {
    color: string;
    blur: number;
    offsetX?: number;
    offsetY?: number;
};
export declare class BasicRenderEngine extends EventEmitter {
    width: number;
    height: number;
    isSafari: boolean;
    canvas: HTMLCanvasElement;
    ctx: CanvasRenderingContext2D;
    pixelRatio: number;
    options: RenderOptions;
    timeUnits: string;
    styles: RenderStyles;
    blockPaddingLeftRight: number;
    blockHeight: number;
    blockPaddingTopBottom: number;
    charHeight: number;
    placeholderWidth: number;
    avgCharWidth: number;
    minTextWidth: number;
    textRenderQueue: Text[];
    strokeRenderQueue: Stroke[];
    rectRenderQueue: RectRenderQueue;
    zoom: number;
    positionX: number;
    min: number;
    max: number;
    ctxCachedSettings: {};
    ctxCachedCalls: {};
    constructor(canvas: HTMLCanvasElement, settings: RenderSettings);
    setSettings({ options, styles }: RenderSettings): void;
    reset(): void;
    setCtxValue: (field: string, value: number | string) => void;
    callCtx: (fn: any, value: any) => void;
    setCtxShadow(shadow: Shadow): void;
    setCtxFont(font: string): void;
    fillRect(x: number, y: number, w: number, h: number): void;
    fillText(text: string, x: number, y: number): void;
    renderBlock(color: string, x: number, y: number, w: number): void;
    renderStroke(color: string, x: number, y: number, w: number, h: number): void;
    clear(w?: number, h?: number, x?: number, y?: number): void;
    timeToPosition(time: number): number;
    pixelToTime(width: number): number;
    setZoom(zoom: number): void;
    setPositionX(x: number): number;
    addRectToRenderQueue(color: string, x: number, y: number, w: number): void;
    addTextToRenderQueue(text: string, x: number, y: number, w: number): void;
    addStrokeToRenderQueue(color: string, x: number, y: number, w: number, h: number): void;
    resolveRectRenderQueue(): void;
    resolveTextRenderQueue(): void;
    resolveStrokeRenderQueue(): void;
    setMinMax(min: number, max: number): void;
    getTimeUnits(): string;
    tryToChangePosition(positionDelta: number): void;
    getInitialZoom(): number;
    getRealView(): number;
    resetView(): void;
    resize(width?: number, height?: number): boolean;
    applyCanvasSize(): void;
    copy(engine: OffscreenRenderEngine): void;
    renderTooltipFromData(fields: TooltipField[], mouse: Mouse): void;
    renderShape(color: string, dots: Dots, posX: number, posY: number): void;
    renderTriangle(color: string, x: number, y: number, width: number, height: number, direction: 'bottom' | 'left' | 'right' | 'top'): void;
    renderCircle(color: string, x: number, y: number, radius: number): void;
}
